# Azure Pipeline to Build Packages
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

# Main stages of pipeline
# Each stage depends on the last
stages:
  - stage: Build
    displayName: Package all proceses
    jobs:
      - job: BuildArtifact
        pool:
          vmImage: 'windows-latest'
        steps:
          # Uipath Pack command for processes - buildProcesses variable must be true
          - task: UiPathPack@2
            inputs:
              versionType: 'ManualVersion'
              version: '0.1.$(Build.BuildID)'
              projectJsonPath: '.\'
              orchestratorConnection: 'Dev Orchestrator Default'
              outputPath: '$(Build.ArtifactStagingDirectory)'
            displayName: Pack processes

          # Publish temp build folder as artifact (for later use)
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: drop

  - stage: DeployDev
    displayName: Deploy build artifact to Development
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: deployDev
        displayName: Deploy package to Dev Orchestrator
        pool:
          vmImage: "windows-latest"
        environment: Development
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                  displayName: Download build artifact on build agent

                - powershell: |
                    Register-PSRepository -Name UiPath -SourceLocation https://www.myget.org/F/uipath-dev/api/v2
                    Install-Module -Repository UiPath -Name UiPath.Powershell -Force
                    Import-Module UiPath.Powershell
                  displayName: Load UiPath Module
                - powershell: |
                    $packages = Get-ChildItem -Path $(Pipeline.Workspace)\drop\*.nupkg -Exclude *.Activities.*
                    $activities = Get-ChildItem -Path $(Pipeline.Workspace)\drop\*.Activities.*.nupkg
                    Get-UiPathAuthToken -URL "$(dev-orchURL)" -Username "$(dev-userName)" -Password "$(dev-password)" -FolderPath "$(dev-orchFolder)" -Session
                    Write-Output Packages...
                    Write-Output ( $packages | Select-Object FullName )
                    Write-Output Libraries...
                    Write-Output ( $activities | Select-Object Fullname )
                    $packages | % { Add-UiPathPackage -PackageFile $_.FullName }
                    $activities | % { Add-UiPathLibrary -LibraryPackage $_.FullName }
                    Write-Output "Uploaded packages"
                    Get-UiPathProcess | % { Update-UiPathProcess $_ -Latest }
                  displayName: Deploy package orchestrator
                  env:
                    ORCH_PASSWORD: $(dev-password) #Secure passwords must be declared as env variables